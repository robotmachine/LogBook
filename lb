#!/usr/bin/env python3

"""
 _                ____              _
| |    ___   __ _| __ )  ___   ___ | | __
| |   / _ \ / _` |  _ \ / _ \ / _ \| |/ /
| |__| (_) | (_| | |_) | (_) | (_) |   <
|_____\___/ \__, |____/ \___/ \___/|_|\_\
            |___/

v.1.0

Project Homepage:	https://robotmachine.github.io/LogBook
Project Source:		https://github.com/robotmachine/LogBook

LogBook
Project focused journal entry utility.
(C) 2015 Brian A. Carter (robotmachine@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
"""
import os, configparser, datetime, argparse, time, distutils.util

global lbVer
lbVer = str("1.0")

global ConfigFile
DefaultPath = os.path.expanduser("~/.lbrc")
if os.path.exists(DefaultPath):
	ConfigFile = DefaultPath
else:
	ConfigFile = None
global config
config = configparser.ConfigParser()

def main():
	parser = argparse.ArgumentParser(description="LogBook: A journal tool.", prog="lb")
	parser.add_argument('-d', '--dir',
		action='store', dest='ArgDir', default=None,
		help='Specify a journal directory.')
	parser.add_argument('--config',
		action='store', dest='ArgConfig', default=None,
		help='Specify an alternate config file.')
	parser.add_argument('-v', '--version',
		action='store_true', dest='ArgVer', default=False,
		help='Print version.')
	args = parser.parse_args()
	

	if args.ArgVer is True:
		PrintVersion()

	global ConfigFile
	if args.ArgConfig:
		ConfigFile = args.ArgConfig
	
	global JournalDir
	JournalDir = args.ArgDir
	if JournalDir is None:
		JournalDir = ReadConfig('journal','JournalDir')
	if '~' in JournalDir:
		JournalDir = os.path.expanduser(JournalDir)
	if JournalDir is None:
		QueryTool("Enter path for your Journal directory:\n")
	
	ThisYear = datetime.date.today().strftime('%Y')
	MonthName = datetime.date.today().strftime('%B')
	DayOfWeek = datetime.date.today().strftime('%A')
	FileDate = datetime.date.today().strftime('%Y-%m-%d')
	MakeDir(JournalDir+'/',ThisYear)
	MakeDir(JournalDir+'/'+ThisYear+'/',MonthName)

	JournalPath = JournalDir+'/'+ThisYear+'/'+MonthName+'/'+FileDate
	JournalFile = FileFind(JournalPath, None)

	ProjectPrev = ReadConfig('project','name')
	if ProjectPrev is not None:
		ProjQuery = BoolTool('Are you still working on '+ProjectPrev+'? Y/n')
		if ProjQuery is False:
			FinishQuery = BoolTool('Did you finish '+ProjectPrev+'? Y/n')
			if FinishQuery is False:
				PrevProjBool = "Abandoned"
				PrevProjStat = QueryTool('Why did you stop working on '+ProjectPrev+'?')
			else:
				PrevProjBool = "Completed"
				PrevProjStat = QueryTool('How did '+ProjectPrev+' turn out?')
			ProjectEntry = QueryTool('What project are you working on now?')
		else:
			ProjectEntry = ProjectPrev
			ProjectPrev = None
	else:
		ProjectEntry = QueryTool('What project are you working on?')
	ProjectStatus = QueryTool('How are things going with '+ProjectEntry+'?')
	
	WriteConfig('project','name',ProjectEntry)
	
	JournalEntry = QueryTool('What should the journal say?')

	if ProjectPrev is not None:
		WriteThis = str('Previous Project: '+ProjectPrev+'\nStatus: '+PrevProjBool+'\nNotes: '+PrevProjStat+'\n\nCurrent Project: '+ProjectEntry+'\nProject Status: '+ProjectStatus+'\n\nJournal: '+JournalEntry)
		JournalPrint(JournalFile,WriteThis)
	else:
		WriteThis = str('Current Project: '+ProjectEntry+'\Project Status: '+ProjectStatus+'\nJournal: '+JournalEntry)
		JournalPrint(JournalFile,WriteThis)
	
	quit()	

def ReadConfig(key,val):
	if ConfigFile is None:
		print("No config file is selected.")
		result = None
	try:
		config.read(ConfigFile)
		result = config[key][val]
	except:
		result = None
	return str(result)

def WriteConfig(key,val,entry):
	config [key] = {val: entry}
	try:
		with open(ConfigFile, 'w') as ConfigWrite:
			config.write(ConfigWrite)
	except PermissionError:
		print('\nPERMISSION ERROR:\nCannot write to '+ConfigFile)
		quit()
	except:
		print('\nUNKNOWN ERROR:\nSomething went wrong writing to '+ConfigFile)
		quit()

def MakeDir(base,dirname):
	try:
		os.stat(base+dirname)
	except:
		os.mkdir(base+dirname)

def FileFind(JournalPath,Counter):
	if Counter is None:
		Counter = 1
	JournalFile = JournalPath+'-LogBook.txt'
	while os.path.exists(JournalFile) is True:
		Counter = Counter + 1
		JournalFile = JournalPath+'-LogBook-'+str(Counter)+'.txt'
	return JournalFile

def JournalPrint(JournalFile,JournalEntry):
	try:
		with open(JournalFile, "a") as JournalWrite:
			JournalWrite.write(JournalEntry)
			print('\n\n\nWrote:\n'+JournalEntry+'\n\nTo file: '+JournalFile)
	except PermissionError:
		print("\nPERMISSION ERROR:\nCannot write to "+JournalFile)
		quit()
	except FileNotFoundError:
		print("\nFILE NOT FOUND:\n"+JournalFile)
	except:
		print("\nUNKNOWN ERROR:\nSomething went wrong writing to "+JournalFile)
		quit()

def UserExit():
	print("\nUser exited.")
	quit()

def BoolTool(query):
	bquery = QueryTool(query)
	try:
		result = bool(distutils.util.strtobool(bquery))
		return result
	except:
		result = False
		return result

def QueryTool(query):
	try:
		result = input(query+'\n')
		return result
	except KeyboardInterrupt:
		UserExit()
	except:
		print("\nSyntax error.")
		quit()

def PrintVersion():
	print("\nLogBook v."+str(lbVer)+"\n\n(C)2015 Brian A. Carter\nrobotmachine@gmail.com\nhttps://robotmachine.github.io/LogBook")
	quit()

main()
